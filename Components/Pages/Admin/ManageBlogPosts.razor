@page "/admin/manage-posts"
<title>Manage BlogPosts</title>
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IBlogPostAdminService BlogPostAdminService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService ToastService
@inject NavigationManager NavigationManager
@using SortDirection=BlazorBootstrap.SortDirection;
<style type="text/css">
    table > tbody > tr > td {
        vertical-align: middle;
    }
</style>
<AdminHeader Title="Manage BlogPosts">
    <ActionButtons>
        <a href="/admin/manage-posts/new" class="btn btn-primary text-decoration-none d-flex justify-content-center align-items-center">
            <Icon Name="IconName.PlusCircleFill" Size="IconSize.x5" Color="IconColor.Light" Class="pe-1" />
            Add New Blog Post
        </a>
    </ActionButtons>
</AdminHeader>
<Modal @ref="modal" Title="Delete Blog Post" UseStaticBackdrop="true">
    <BodyTemplate>
        <p class="h5 fw-bold">Are You Sure You Want To Delete This Blog Post?</p>
        <div class="row">
            <div class="d-inline-flex align-items-center my-1">
                <div>
                    <h6 class="h6 m-0 fw-bold">Id:&nbsp;</h6>
                </div>
                <div>
                    <p class="m-0" style="padding-top:2px">@selectedBlogPost.Id</p>
                </div>
            </div>
            <div class="d-inline-flex align-items-center my-1">
                <div>
                    <h6 class="h6 m-0 fw-bold">Title:&nbsp;</h6>
                </div>
                <div>
                    <p class="m-0" style="padding-top:2px">@selectedBlogPost.Title</p>
                </div>
            </div>
            <div class="d-inline-flex align-items-center my-1">
                <div>
                    <h6 class="h6 m-0 fw-bold">Slug:&nbsp;</h6>
                </div>
                <div>
                    <p class="m-0" style="padding-top:2px">@selectedBlogPost.Slug</p>
                </div>
            </div>
            <div class="d-inline-flex align-items-center my-1">
                <div>
                    <h6 class="h6 m-0 fw-bold">Category:&nbsp;</h6>
                </div>
                <div>
                    <p class="m-0" style="padding-top:2px">@selectedBlogPost.Category.Name</p>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Button" @onclick="()=>DeleteBlogPostAsync(selectedBlogPost)" Color="ButtonColor.Danger">Yes</Button>
        <Button Color="ButtonColor.Light" @onclick="()=>HandleDeleteModal(false,null!)">No</Button>
    </FooterTemplate>
</Modal>
<div class="card shadow p-3">
    <Grid TItem="BlogPost"
          @ref="grid"
          Class="table table-hover table-bordered table-striped "
          DataProvider="BlogPostProvider"
          AllowFiltering="true"
          Responsive="true" AllowPaging="true"
          AllowSorting="true"
          PageSize="5"
          PageSizeSelectorVisible="true"
          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
          ItemsPerPageText="Select Number Of Items To Show"
          PaginationItemsTextFormat="{0} - {1} of {2} Items">

        <GridColumn TItem="BlogPost" Sortable="true" HeaderText="@nameof(BlogPost.Id)" PropertyName="@nameof(BlogPost.Id)" SortString="@nameof(BlogPost.Id)" SortKeySelector="item=>item.Id" IsDefaultSortColumn="true">
            @context.Id
        </GridColumn>
        <GridColumn TItem="BlogPost" Sortable="true" HeaderText="@nameof(BlogPost.Title)" PropertyName="@nameof(BlogPost.Title)" SortString="@nameof(BlogPost.Title)" SortKeySelector="item=>item.Title">
            <div class="py-2" style="display:grid; grid-template-columns: 60px auto; grid-column-gap:10px;">
                <img src="@context.Image" style="height:60px; width:60px;object-fit:cover" />
                <div>
                    <lable class="mb-0 d-block">@context.Title</lable>
                    @if (context.IsPublished)
                    {
                        <a href="/posts/@context.Slug" target="_blank">@context.Slug</a>
                    }
                    else
                    {
                        <lable>@context.Slug</lable>
                    }
                </div>
            </div>
        </GridColumn>
        <GridColumn TItem="BlogPost" Sortable="true" HeaderText="@nameof(BlogPost.Category)" PropertyName="@nameof(BlogPost.Category.Name)" SortString="@nameof(BlogPost.Category)" SortKeySelector="item=>item.Category.Name">
            @context.Category.Name
        </GridColumn>
        <GridColumn TItem="BlogPost" Sortable="true" HeaderText="Featured?" PropertyName="@nameof(BlogPost.IsFeatured)" SortString="@nameof(BlogPost.IsFeatured)" SortKeySelector="item=>item.IsFeatured">
            @if (context.IsFeatured)
            {
                <Switch class="text-success" Label="Yes" Value="context.IsFeatured" ValueExpression="() => context.IsFeatured" ValueChanged="@(()=>HandleIsFeaturedAsync(context))" />
            }
            else
            {
                <Switch Class="text-danger" Label="No" Value="context.IsFeatured" ValueExpression="() => context.IsFeatured" ValueChanged="@(()=>HandleIsFeaturedAsync(context))" />
            }
        </GridColumn>
        <GridColumn TItem="BlogPost" Sortable="true" HeaderText="Published?" PropertyName="@nameof(BlogPost.IsPublished)" SortString="@nameof(BlogPost.IsPublished)" SortKeySelector="item=>item.IsPublished">
            @if (context.IsPublished)
            {
                <Switch class="text-success" Label="Yes" Value="context.IsPublished" ValueExpression="() => context.IsPublished" ValueChanged="@(()=>HandleIsPublishedAsync(context))" />
            }
            else
            {
                <Switch Class="text-danger" Label="No" Value="context.IsPublished" ValueExpression="() => context.IsPublished" ValueChanged="@(()=>HandleIsPublishedAsync(context))" />
            }
        </GridColumn>
        <GridColumn TItem="BlogPost" HeaderText="Actions" Filterable="false">
            <a href="/admin/manage-posts/edit/@context.Id" class="btn btn-info btn-sm">Edit</a>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="()=>HandleDeleteModal(true,context)">Delete</Button>
        </GridColumn>
    </Grid>
</div>

@code {
    private Modal modal = default!;
    private Grid<BlogPost> grid = default!;
    private BlogPost selectedBlogPost = default!;
    private async Task<GridDataProviderResult<BlogPost>> BlogPostProvider(GridDataProviderRequest<BlogPost> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }
        var result = await BlogPostAdminService.GetBlogPostsAsync(request.Filters, request.PageNumber, request.PageSize, sortString, sortDirection);
        return await Task.FromResult(new GridDataProviderResult<BlogPost> { Data = result.Item1, TotalCount = result.Item2 });
    }
    private async Task HandleIsFeaturedAsync(BlogPost blogPost)
    {
        try
        {
            var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = user.User.GetIdOfUser();
            blogPost.IsFeatured = !blogPost.IsFeatured;
            await BlogPostAdminService.SaveBlogPostAsync(blogPost, userId);
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
    }
    private async Task HandleIsPublishedAsync(BlogPost blogPost)
    {
        try
        {
            var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = user.User.GetIdOfUser();
            blogPost.IsPublished = !blogPost.IsPublished;
            await BlogPostAdminService.SaveBlogPostAsync(blogPost, userId);
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
    }
    private async Task DeleteBlogPostAsync(BlogPost blogPost)
    {
        try
        {
            var result = await BlogPostAdminService.DeleteBlogPostAsync(blogPost.Id);
            if (result != null)
            {
                ToastService.ShowSuccessToast("Blog Post Deleted Successfully");
            }
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
        finally
        {
            await HandleDeleteModal(false, null!);
            await grid.RefreshDataAsync();
        }
    }
    private async Task HandleDeleteModal(bool openModal, BlogPost blogPost)
    {
        try
        {
            if (openModal && blogPost != null)
            {
                selectedBlogPost = blogPost;
                await modal.ShowAsync();
            }
            else
            {
                await modal.HideAsync();
            }
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
    }
}
