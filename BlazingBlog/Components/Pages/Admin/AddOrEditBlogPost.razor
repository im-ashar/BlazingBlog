@page "/admin/manage-posts/new"
@page "/admin/manage-posts/edit/{id:int?}"
<PageTitle>@dashboardHeaderTitle</PageTitle>
@rendermode InteractiveServer

@inject IBlogPostAdminService BlogPostAdminService
@inject ICategoryService CategoryService
@inject ToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

    <HeadContent>
        <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
        <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
    </HeadContent>
    <SectionContent SectionName="scripts">
        <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
        <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
        <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
    </SectionContent>
    <AdminHeader Title="@dashboardHeaderTitle">
        <ActionButtons>
            <a href="/admin/manage-posts" class="btn btn-primary text-decoration-none d-flex justify-content-center align-items-center">
                <Icon Name="IconName.ArrowLeft" Size="IconSize.x5" Color="IconColor.Light" Class="pe-1" />
                Back To Manage Blog Posts
            </a>
        </ActionButtons>
    </AdminHeader>
    <EditForm Model="model" FormName="blogPostForm" class="card shadow" OnValidSubmit="SaveBlogPostAsync">
        <DataAnnotationsValidator />
        <div class="row card-body m-3">
            <div class="col-sm-6">
                <div class="mb-3">
                    <label for="@model.Title" class="form-label fw-bold">Title</label>
                    <InputText @bind-Value="model.Title" class="form-control" placeholder="Blog Post Title" />
                    <ValidationMessage For="()=>model.Title" />
                </div>
                <div class="mb-3">
                    <label for="@model.Title" class="form-label fw-bold">Category</label>
                    <InputSelect @bind-Value="model.CategoryId" class="form-control" placeholder="Select A Category">
                        <option value="0">Select A Category</option>
                        @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="()=>model.CategoryId" />
            </div>
            <div class="mb-3">
                <label for="@model.Introduction" class="form-label fw-bold">Introduction</label>
                <InputText @bind-Value="model.Introduction" class="form-control" placeholder="Blog Post Introduction" />
                <ValidationMessage For="()=>model.Introduction" />
            </div>
            @if (!string.IsNullOrWhiteSpace(imageUrl))
            {
                <div class="mb-3">
                    <img src="@imageUrl" class="img-fluid" style="height:200px" />
                </div>
            }
            <div class="mb-3">
                <label for="@model.ImageFile" class="form-label fw-bold">Upload An Image</label>
                <InputFile class="form-control mb-3" @bind-Value="model.ImageFile" OnChange="HandleUploadFileAsync" />
                <ValidationMessage For="()=>model.Image" />
            </div>
            <div class="d-flex mb-3">
                <label for="@model.IsFeatured" class="form-label me-3 fw-bold">Featured?</label>
                <span>
                    <Switch @bind-Value="model.IsFeatured" />
                </span>
            </div>
            <div class="d-flex mb-3">
                <label for="@model.IsPublished" class="form-label me-3 fw-bold">Published?</label>
                <span>
                    <Switch @bind-Value="model.IsPublished" />
                </span>
            </div>
        </div>
        <div class="col-sm-6 d-flex">
            <div class="mb-3 flex-grow-1">
                <label class="form-label fw-bold">Content: </label>
                <BlazoredTextEditor ToolbarCSSClass="form-control" EditorCssClass="form-control" @ref="@quillHtml" Placeholder="Enter Content...">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @((MarkupString)editorContent)
                    </EditorContent>
                </BlazoredTextEditor>
                @if (!string.IsNullOrWhiteSpace(emptyContentError))
                {
                    <div class="validation-message">@emptyContentError</div>
                }
            </div>
        </div>
    </div>
    <div class="m-3 d-flex">
        <Button Class="m-1 d-flex align-items-center" Type="ButtonType.Submit" Color="ButtonColor.Success">
            <Icon Name="IconName.Save" Size="IconSize.x5" Color="IconColor.Light" Class="pe-1" />
            Save Changes
        </Button>
        <a href="/admin/manage-posts" class="btn btn-danger text-decoration-none m-1 d-flex align-items-center" data-enhance-nav="false">
            <Icon Name="IconName.XCircle" Size="IconSize.x5" Color="IconColor.Light" Class="pe-1" />
            Close
        </a>
    </div>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    private BlogPost model = new BlogPost();
    private List<Category> categories = [];

    private BlazoredTextEditor quillHtml = default!;

    private string editorContent = default!;

    private string emptyContentError = default!;

    private string dashboardHeaderTitle => Id.HasValue && Id > 0 ? "Edit Blog Post" : "Add A New Blog Post";

    private string? imageUrl;

    protected async override Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
        if (Id.HasValue && Id > 0)
        {
            var blogPost = await BlogPostAdminService.GetBlogPostByIdAsync(Id.Value);
            if (blogPost == null)
            {
                NavigationManager.NavigateTo("/admin/manage-posts", replace: true);
                return;
            }
            model = blogPost;
            imageUrl = model.Image;
            editorContent = model.Content;
        }
    }

    private async Task HandleUploadFileAsync(InputFileChangeEventArgs e)
    {
        try
        {
            model.ImageFile = e.File;
            model.Image = "We Got File";
            var maxAllowedSize = AppConstants.ImageSettings.MaxImageSize;
            if (!IsImageFile(e.File.Name))
            {
                model.ImageFile = null;
                model.Image = null!;
                throw new Exception("Please Upload An Image File");
            }
            if (e.File.Size >= maxAllowedSize)
            {
                model.ImageFile = null;
                model.Image = null!;
                throw new Exception("Please Upload An Image File Less Than 1MB");
            }
            var extension = Path.GetExtension(e.File.Name);
            using var imageStream = e.File.OpenReadStream(maxAllowedSize);
            using var ms = new MemoryStream();
            await imageStream.CopyToAsync(ms);

            imageUrl = $"data:image/{extension};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
    }
    public bool IsImageFile(string fileName)
    {
        string[] imageExtensions = AppConstants.ImageSettings.AllowedImageExtensions; // Add more extensions if needed

        string extension = Path.GetExtension(fileName);
        if (!string.IsNullOrEmpty(extension))
        {
            string comparisonExtension = extension.ToLower();
            return imageExtensions.Contains(comparisonExtension);
        }
        return false;
    }
    //Save Blog Post
    private async Task SaveBlogPostAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(await quillHtml.GetText()))
            {
                emptyContentError = "Please Enter Some Content";
                return;
            }
            model.Content = await quillHtml.GetHTML();
            var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = user.User.GetIdOfUser();
            var result = await BlogPostAdminService.SaveBlogPostAsync(model, userId);
            if (result == null)
            {
                throw new Exception("Failed To Save Blog Post");
            }
            ToastService.ShowSuccessToast("Blog Post Saved Successfully");
            NavigationManager.NavigateTo("/admin/manage-posts");
        }
        catch (Exception ex)
        {
            ex.ShowErrorToast(ToastService);
        }
    }
}
