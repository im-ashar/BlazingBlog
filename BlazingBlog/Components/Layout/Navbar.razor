@using BlazingBlog.Data
@using BlazingBlog.Data.Models
@using BlazingBlog.Services
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ICategoryService CategoryService

<nav class="navbar navbar-expand-lg fixed-top py-0">
    <div class="container" style="min-height:55px;background-color: #e3f2fd;">
        <a class="navbar-brand" href="/"><strong>Blazing Blog</strong></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                @foreach (var category in _categories)
                {
                    <li class="nav-item">
                        <NavLink data-enhance-nav="false" class="nav-link" href="@(category.Slug+"-posts")">
                            @category.Name
                        </NavLink>
                    </li>
                }
            </ul>
            <div class="d-flex">
                <AuthorizeView>
                    <Authorized>
                        <ul class="navbar-nav ms-auto d-flex align-items-center">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="admin/dashboard">
                                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true">@context.User.GetFullNameOfUser()</span>
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <LogoutForm />
                            </li>
                        </ul>
                    </Authorized>
                    <NotAuthorized>
                        <ul class="navbar-nav ms-auto d-flex align-items-center">
                            <li class="nav-item me-1">
                                <NavLink class="nav-link btn btn-info" href="account/login">Login</NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link btn btn-info" href="account/register">Register</NavLink>
                            </li>
                        </ul>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</nav>
@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private Category[] _categories = [];
    private const int maxCategoriesToShowOnNavbar = 5;

    protected async override Task OnInitializedAsync()
    {
        if (HttpContext.User.Identity != null && HttpContext.User.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(HttpContext.User);
            if (user != null)
            {
                var additionalClaims = new List<Claim> { new Claim(AppConstants.ClaimNames.FullName, user.FullName) };
                await SignInManager.SignInWithClaimsAsync(user, false, additionalClaims);
            }
        }
        await GetCategoriesToShowOnNavbar();
    }

    private async Task GetCategoriesToShowOnNavbar()
    {
        var categories = await CategoryService.GetCategoriesAsync();
        _categories = categories
                                .Where(c => c.ShowOnNavbar)
                                .Take(maxCategoriesToShowOnNavbar)
                                .ToArray();
        if (_categories.Length < maxCategoriesToShowOnNavbar)
        {
            _categories = [.. _categories, .. categories.Where(c => !c.ShowOnNavbar).Take(maxCategoriesToShowOnNavbar - _categories.Length).ToArray()];
        }
    }
}